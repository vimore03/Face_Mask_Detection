# -*- coding: utf-8 -*-
"""Face_Mask_Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UC4tss2cMmn8TgjpVeAR_7UB_Y0dJG1j
"""

!pip install kaggle

!mkdir -p ~/.kaggle/
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

import kagglehub

# Download latest version
path = kagglehub.dataset_download("omkargurav/face-mask-dataset")

print("Path to dataset files:", path)

!kaggle datasets download -d omkargurav/face-mask-dataset

# extrating the compressed dataset
from zipfile import ZipFile
dataset='/content/face-mask-dataset.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print("The dataset is extracted")

!ls

"""**Importing Dependencies**"""

import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

with_mask_files=os.listdir('/content/data/with_mask')
print(with_mask_files[0:5])
print(with_mask_files[-5:])

without_mask_files=os.listdir('/content/data/without_mask')
print(without_mask_files[0:5])
print(without_mask_files[-5:])

print("Number of masked images", len(with_mask_files))
print("Number of without masked images", len(without_mask_files))

"""**Creating labels for two class of image**

with_mask --> 1
without mask --> 0
"""

#creating labels
with_mask_labels = [1]*3725
without_mask_labels = [0]*3828

print(with_mask_labels[0:5])
print(without_mask_labels[0:5])

print(len(with_mask_labels))
print(len(without_mask_labels))

labels = with_mask_labels+without_mask_labels
print(len(labels))
print(labels[0:5])
print(labels[-5:])

"""**Displaying the images**"""

import matplotlib.image as mpimg

# displaying with mask images
img = mpimg.imread('/content/data/with_mask/with_mask_2444.jpg')
imgplot = plt.imshow(img)
plt.show()

# displaying without mask images
img = mpimg.imread('/content/data/without_mask/without_mask_2145.jpg')
imgplot = plt.imshow(img)
plt.show()

"""**Image processing**

1. Resize images
2. Convert images to numpy arrays
"""

# convert images to numpy arrays
with_mask_path='/content/data/with_mask/'
data=[]
for img_file in with_mask_files:
  image = Image.open(with_mask_path + img_file)
  image = image.resize((128, 128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)


without_mask_path='/content/data/without_mask/'

for img_file in without_mask_files:
  image = Image.open(without_mask_path + img_file)
  image = image.resize((128, 128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

# convert images to numpy arrays
type(data)

len(data)

data[0]

type(data[0])

data[0].shape

# converting image list and label list to numpy array
X=np.array(data)
Y=np.array(labels)

type(X)
type(Y)

print(X.shape)
print(Y.shape)

print(Y)

"""**Train Test split**"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

# scaling down the data
X_train_scaled = X_train/255
X_test_scaled = X_test/255

X_train_scaled[0]

X_train[0]

"""**Building a convolutional neural network**"""

import tensorflow as tf
from tensorflow import keras

num_of_classes = 2
model = keras.Sequential()

# adding first layer
model.add(keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(128,128,3)))
model.add(keras.layers.MaxPooling2D(2,2))

model.add(keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))
model.add(keras.layers.MaxPooling2D(2,2))

# to pass single dimensional data we convert matrix into vector
model.add(keras.layers.Flatten())

model.add(keras.layers.Dense(128, activation='relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(64, activation='relu'))
model.add(keras.layers.Dropout(0.5))

model.add(keras.layers.Dense(num_of_classes, activation='sigmoid'))

# compiling the neural network
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['acc'])

# training the neural network
history = model.fit(X_train_scaled, Y_train, validation_split=0.1, epochs=7)

"""**Model evaluation**"""

loss, accuracy = model.evaluate(X_test_scaled, Y_test)
print("Test Accuracy: ", accuracy)

h = history
# plotting loss value
plt.plot(h.history['loss'], label='training loss')
plt.plot(h.history['val_loss'], label='validation loss')
plt.legend()
plt.show()

# plotting accuracy value
plt.plot(h.history['acc'], label='training accuracy')
plt.plot(h.history['val_acc'], label='validation accuracy')
plt.legend()
plt.show()

"""**Predictive system**"""

input_image_path= input("path of the image to be predicted")

input_image=cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128, 128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)
print(input_prediction)
input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 1:
  print("The person is wearing a mask")
else:
  print("The person in the image is NOT wearing a mask")